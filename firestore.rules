rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Funções auxiliares
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.type == 'admin';
    }

    // Regras para coleção users
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && isOwner(userId);
      allow update: if isAuthenticated() && isOwner(userId);
      allow delete: if isAuthenticated() && isAdmin();
    }

    // Regras para coleção events
    match /events/{eventId} {
      allow read: if true;
      allow create: if isAuthenticated() && isAdmin();
      allow update, delete: if isAuthenticated() && 
                          (resource.data.creatorId == request.auth.uid || isAdmin());
    }

    // Regras para coleção lectures
    match /lectures/{lectureId} {
      allow read: if true;
      allow create: if isAuthenticated() && isAdmin();
      allow update, delete: if isAuthenticated() && 
                          (resource.data.creatorId == request.auth.uid || isAdmin());
    }

    // Regras para coleção challenges
    match /challenges/{challengeId} {
      allow read: if true;
      allow create: if isAuthenticated() && isAdmin();
      allow update, delete: if isAuthenticated() && 
                          (resource.data.creatorId == request.auth.uid || isAdmin());
    }

    // Regras para coleção appointments
    match /appointments/{appointmentId} {
      allow read: if true;
      allow create: if isAuthenticated() && isAdmin();
      allow update, delete: if isAuthenticated() && 
                          (resource.data.creatorId == request.auth.uid || isAdmin());
    }

    // Regras para coleção attendance
    match /attendance/{attendanceId} {
      allow read: if isAuthenticated() && 
                 (resource.data.userId == request.auth.uid || 
                  resource.data.creatorId == request.auth.uid || 
                  isAdmin());
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && 
                   (resource.data.userId == request.auth.uid || 
                    resource.data.creatorId == request.auth.uid || 
                    isAdmin());
      allow delete: if isAuthenticated() && isAdmin();
    }
  }
}
